# vpn_bot/bot.py
import secrets
from aiohttp import web
import time
from datetime import datetime, timezone
import shutil
from pathlib import Path
import logging, os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from vpn_bot.config import (
    BOT_TOKEN, PRICE_USDT, SUB_DAYS, DEV_MODE, OWNER_ID,
    SERVER_HOST, SERVER_PORT,
    WG_ENDPOINT_HOST, WG_ENDPOINT_PORT, WG_ALLOWED_IPS, WG_DNS, WG_SERVER_PUBLIC_KEY,
    WG_ADDRESS_PREFIX, WG_ADDRESS_CIDR, WG_START_HOST,
)
from vpn_bot.cryptopay import create_invoice, get_invoice_status
from vpn_bot.users import (
    load_users, register_user, activate_subscription, is_subscription_active, save_users,
    set_wg_profile, next_wg_address,
)
from vpn_bot.wg_utils import gen_wg_keypair

logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("vpn_bot")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
USERS = load_users()

# –ü—É—Ç–∏ –∫ —à–∞–±–ª–æ–Ω–∞–º –∏ –ª–∏—á–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–∞–º
CFG_DIR = Path(__file__).with_name("vpn_configs")
TEMPLATE_OVPN = CFG_DIR / "default.ovpn"
USER_CFG_DIR = CFG_DIR / "users"
USER_CFG_DIR.mkdir(parents=True, exist_ok=True)

TEMPLATE_WG = CFG_DIR / "default_wg.conf"
USER_WG_DIR = CFG_DIR / "users"
USER_WG_DIR.mkdir(parents=True, exist_ok=True)



# –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∞–Ω—Ç–∏-—Å–ø–∞–º: –∫—É–ª–¥–∞—É–Ω 2 —Å–µ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
LAST_CALL: dict[int, float] = {}
COOLDOWN_SEC = 2.0

# –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è –≤—Ö–æ–¥–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
TOKENS: dict[str, dict] = {}  # code -> {"user_id": int, "exp": float}
TOKEN_TTL_SEC = 600  # 10 –º–∏–Ω—É—Ç

def create_login_code(user_id: int) -> str:
    code = f"{secrets.randbelow(1_000_000):06d}"  # 000000..999999
    TOKENS[code] = {"user_id": user_id, "exp": time.time() + TOKEN_TTL_SEC}
    return code

def take_token(code: str) -> dict | None:
    """–í–µ—Ä–Ω—ë—Ç –∑–∞–ø–∏—Å—å –∏ —É–¥–∞–ª–∏—Ç —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –∂–∏–≤–æ–π; –∏–Ω–∞—á–µ None."""
    data = TOKENS.pop(code, None)
    if not data:
        return None
    if data["exp"] < time.time():
        return None
    return data

def peek_token(code: str) -> dict | None:
    """–í–µ—Ä–Ω—ë—Ç –∑–∞–ø–∏—Å—å –ø–æ –∫–æ–¥—É, –Ω–µ —É–¥–∞–ª—è—è –µ—ë (–¥–ª—è /api/validate)."""
    data = TOKENS.get(code)
    if not data:
        return None
    if data["exp"] < time.time():
        return None
    return data

def get_telegram_link_url() -> str:
    try:
        from vpn_bot.config import TG_BOT_USERNAME
        username = TG_BOT_USERNAME.strip()
        if username.startswith("@"):
            username = username[1:]
        if username:
            return f"https://t.me/{username}"
    except Exception:
        pass
    return "https://t.me/thatvpn_bot"



async def _throttle(update: Update) -> bool:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –Ω–∞–¥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑-–∑–∞ –∫—É–ª–¥–∞—É–Ω–∞."""
    uid = update.effective_user.id if update.effective_user else 0
    now = time.time()
    last = LAST_CALL.get(uid, 0.0)
    if now - last < COOLDOWN_SEC:
        # –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º—è–≥–∫–∏–π –æ—Ç–≤–µ—Ç
        if update.message:
            await update.message.reply_text("‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.")
        return True
    LAST_CALL[uid] = now
    return False

def ensure_user_config(user_id: int) -> Path:
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–≤–æ–π —Ñ–∞–π–ª-–∫–æ–Ω—Ñ–∏–≥.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ä–µ–Ω–¥–µ—Ä–∏–º –∏–∑ —à–∞–±–ª–æ–Ω–∞ default.ovpn, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.
    """
    dst = USER_CFG_DIR / f"{user_id}.ovpn"
    if dst.exists():
        return dst

    if not TEMPLATE_OVPN.exists():
        raise FileNotFoundError("–®–∞–±–ª–æ–Ω default.ovpn –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ vpn_bot/vpn_configs/")

    # –±–µ—Ä—ë–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    u = USERS.get(user_id)
    sub_end = getattr(u, "subscription_end", None) or ""

    # —á–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    text = TEMPLATE_OVPN.read_text(encoding="utf-8")
    placeholders = {
        "SERVER_HOST": SERVER_HOST,
        "SERVER_PORT": str(SERVER_PORT),
        "USER_ID": str(user_id),
        "SUB_END": sub_end,
    }
    for k, v in placeholders.items():
        text = text.replace(f"{{{{{k}}}}}", v)

    dst.write_text(text, encoding="utf-8")
    return dst

def ensure_user_wg_config(user_id: int) -> Path:
    """
    –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ wg-–∫–ª—é—á–µ–π + –∞–¥—Ä–µ—Å–∞, —Ä–µ–Ω–¥–µ—Ä–∏—Ç .conf –∏–∑ —à–∞–±–ª–æ–Ω–∞.
    """
    dst = USER_WG_DIR / f"{user_id}.conf"
    # –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    if dst.exists():
        return dst
    if not TEMPLATE_WG.exists():
        raise FileNotFoundError("–®–∞–±–ª–æ–Ω default_wg.conf –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ vpn_bot/vpn_configs/")

    # –ø–æ–ª—É—á–∞–µ–º/–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    u = USERS.setdefault(user_id, None)
    need_save = False
    if not u or not getattr(u, "wg_private_key", None) or not getattr(u, "wg_public_key", None):
        priv, pub = gen_wg_keypair()
        addr = next_wg_address(USERS, WG_ADDRESS_PREFIX, WG_ADDRESS_CIDR, start_host=WG_START_HOST)
        set_wg_profile(USERS, user_id, priv, pub, addr)
        need_save = True

    # –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏)
    u = USERS[user_id]
    sub_end = getattr(u, "subscription_end", "") or ""

    # –≥–æ—Ç–æ–≤–∏–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    placeholders = {
        "USER_ID": str(user_id),
        "SUB_END": sub_end,
        "WG_ENDPOINT_HOST": WG_ENDPOINT_HOST,
        "WG_ENDPOINT_PORT": str(WG_ENDPOINT_PORT),
        "WG_ALLOWED_IPS": WG_ALLOWED_IPS,
        "WG_DNS": WG_DNS,
        "WG_SERVER_PUBLIC_KEY": WG_SERVER_PUBLIC_KEY,
        "CLIENT_PRIVATE_KEY": u.wg_private_key or "<MISSING_PRIV>",
        "CLIENT_ADDRESS": u.wg_address or "<MISSING_ADDR>",
    }

    text = TEMPLATE_WG.read_text(encoding="utf-8")
    for k, v in placeholders.items():
        text = text.replace(f"{{{{{k}}}}}", v)

    dst.write_text(text, encoding="utf-8")
    if need_save:
        save_users(USERS)
    return dst

async def app_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await _throttle(update): return
    user_id = update.effective_user.id
    if not is_subscription_active(USERS, user_id):
        await update.message.reply_text("‚õî –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –°–Ω–∞—á–∞–ª–∞ /buy –∏ /check (–∏–ª–∏ /dev_paid).")
        return
    code = create_login_code(user_id)
    await update.message.reply_text(
        f"üîë –ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {code}\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç {TOKEN_TTL_SEC // 60} –º–∏–Ω.\n\n"
        f"–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ ‚Äî –æ–Ω–æ —Å–∫–∞—á–∞–µ—Ç –≤–∞—à –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await _throttle(update): return
    user_id = update.effective_user.id
    register_user(USERS, user_id)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/buy ‚Äî —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É\n"
        "/check <invoice_id> ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/vpn ‚Äî –ø–æ–ª—É—á–∏—Ç—å VPN-–∫–æ–Ω—Ñ–∏–≥\n"
        "/help ‚Äî –ø–æ–º–æ—â—å –∏ –∫–æ–º–∞–Ω–¥—ã"
)



async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await _throttle(update): return
    user_id = update.effective_user.id
    description = f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {SUB_DAYS} –¥–Ω–µ–π"
    try:
        url, invoice_id = create_invoice(
            amount=PRICE_USDT,
            asset="USDT",
            description=description,
            payload=str(user_id),
            expires_in=15 * 60,  # 15 –º–∏–Ω—É—Ç
        )
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ create_invoice")
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç: {e}")
        return

    await update.message.reply_text(
        f"üí≥ –°—á—ë—Ç –Ω–∞ *{PRICE_USDT} USDT* —Å–æ–∑–¥–∞–Ω.\n\n"
        f"üîó –û–ø–ª–∞—Ç–∏—Ç—å: {url}\n"
        f"üßæ ID —Å—á—ë—Ç–∞: `{invoice_id}`\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        f"`/check {invoice_id}`",
        parse_mode="Markdown",
        disable_web_page_preview=True,
    )


async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await _throttle(update): return
    args = context.args or []
    if len(args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/check <invoice_id>`", parse_mode="Markdown")
        return

    invoice_id_raw = args[0].strip()
    if not invoice_id_raw.isdigit():
        await update.message.reply_text("‚ùó ID —Å—á—ë—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: `/check 32714801`", parse_mode="Markdown")
        return

    user_id = update.effective_user.id
    # –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –µ—Å–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –Ω–µ –¥—ë—Ä–≥–∞–µ–º API
    if is_subscription_active(USERS, user_id):
        await update.message.reply_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vpn –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞.")
        return

    try:
        status = get_invoice_status(int(invoice_id_raw))
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á—ë—Ç–∞: {e}")
        return

    if status == "paid":
        activate_subscription(USERS, user_id, days=SUB_DAYS)
        try:
            ensure_user_wg_config(user_id)
        except Exception:
            log.exception("WG profile prepare failed on activation")
        try:
            ensure_user_config(user_id)
        except Exception as e:
            log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥")
        await update.message.reply_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
        await update.message.reply_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
    elif status == "active":
        await update.message.reply_text("üïì –°—á—ë—Ç –ø–æ–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω. –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∏–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ /check.")
    elif status == "expired":
        await update.message.reply_text("‚åõ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—á—ë—Ç–∞ –∏—Å—Ç—ë–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–∞–Ω–¥–æ–π /buy.")
    else:
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞: {status}")



async def vpn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await _throttle(update): return
    user_id = update.effective_user.id
    if is_subscription_active(USERS, user_id):
        try:
            cfg_path = ensure_user_config(user_id)  # –±–µ—Ä—ë–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π
        except FileNotFoundError:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω default.ovpn. –ü–æ–ª–æ–∂–∏ —Ñ–∞–π–ª –≤ vpn_bot/vpn_configs/default.ovpn")
            return
        except Exception as e:
            log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        if cfg_path.exists():
            with cfg_path.open("rb") as f:
                await update.message.reply_document(
                    document=f,
                    filename=f"vpn_{user_id}.ovpn",
                    caption="üîê –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π VPN-–∫–æ–Ω—Ñ–∏–≥",
                )
        else:
            await update.message.reply_text("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    else:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –°–æ–∑–¥–∞–π—Ç–µ —Å—á—ë—Ç –∫–æ–º–∞–Ω–¥–æ–π /buy.")

async def vpn_wg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await _throttle(update): return
    user_id = update.effective_user.id
    if not is_subscription_active(USERS, user_id):
        await update.message.reply_text("‚õî –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –°–Ω–∞—á–∞–ª–∞ /buy –∏ /check (–∏–ª–∏ /dev_paid).")
        return
    try:
        cfg_path = ensure_user_wg_config(user_id)
    except FileNotFoundError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω default_wg.conf. –ü–æ–ª–æ–∂–∏ –µ–≥–æ –≤ vpn_bot/vpn_configs/")
        return
    except Exception:
        log.exception("WG prepare error")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å WG-–∫–æ–Ω—Ñ–∏–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    with cfg_path.open("rb") as f:
        await update.message.reply_document(
            document=f,
            filename=f"wg_{user_id}.conf",
            caption="üîê –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π WireGuard-–∫–æ–Ω—Ñ–∏–≥ (—à–∞–±–ª–æ–Ω)",
        )



async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await _throttle(update): return
    user_id = update.effective_user.id
    u = USERS.get(user_id)
    if not u:
        await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏. –ù–∞–±–µ—Ä–∏—Ç–µ /start")
        return

    # –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è ‚Äî –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç
    if not u.subscription_end:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ —Å—á—ë—Ç: /buy\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ: /check <invoice_id>"
        )
        return

    try:
        end = datetime.fromisoformat(u.subscription_end)
    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /buy –∑–∞–Ω–æ–≤–æ.")
        return

    now = datetime.utcnow().replace(tzinfo=end.tzinfo)
    if now < end:
        until = end.strftime("%Y-%m-%d %H:%M UTC")
        await update.message.reply_text(
            "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {until}\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /vpn"
        )
    else:
        await update.message.reply_text(
            "‚õî –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å—á—ë—Ç: /buy"
        )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await _throttle(update): return
    await update.message.reply_text(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å\n\n"
        "/buy ‚Äî —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É\n"
        "/check <invoice_id> ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É (active/paid/expired)\n"
        "/status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/vpn ‚Äî –ø–æ–ª—É—á–∏—Ç—å VPN-–∫–æ–Ω—Ñ–∏–≥ (–µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞)\n\n"
        "/vpn_wg ‚Äî –ø–æ–ª—É—á–∏—Ç—å WireGuard-–∫–æ–Ω—Ñ–∏–≥ (—à–∞–±–ª–æ–Ω)\n"
        "DEV (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞, –µ—Å–ª–∏ DEV_MODE=true):\n"
        "/dev_paid <invoice_id> ‚Äî –∏–º–∏—Ç–∞—Ü–∏—è –æ–ø–ª–∞—Ç—ã\n"
         "/app_code - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        "/grant <days> ‚Äî –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ N –¥–Ω–µ–π"
    )


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: /buy, /check, /vpn, /status")


# --- DEV –∫–æ–º–∞–Ω–¥—ã (—Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ DEV_MODE=True –∏ –ø–∏—à–µ—Ç OWNER_ID) ---
async def dev_paid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await _throttle(update): return
    if not DEV_MODE or update.effective_user.id != OWNER_ID:
        return
    user_id = update.effective_user.id
    args = context.args or []
    if len(args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (dev): /dev_paid <invoice_id>")
        return
    activate_subscription(USERS, user_id, days=SUB_DAYS)
    try:
        ensure_user_wg_config(user_id)
    except Exception:
        log.exception("WG profile prepare failed on activation")
    try:
        ensure_user_config(user_id)
    except Exception as e:
        log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ (dev_paid)")
    await update.message.reply_text("‚úÖ (DEV) –û–ø–ª–∞—Ç–∞ –∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
    await update.message.reply_text("‚úÖ (DEV) –û–ø–ª–∞—Ç–∞ –∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

async def grant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await _throttle(update): return
    if not DEV_MODE or update.effective_user.id != OWNER_ID:
        return
    args = context.args or []
    days = int(args[0]) if args else SUB_DAYS
    user_id = update.effective_user.id
    activate_subscription(USERS, user_id, days=days)
    try:
        ensure_user_wg_config(user_id)
    except Exception:
        log.exception("WG profile prepare failed on activation")
    try:
        ensure_user_config(user_id)
    except Exception as e:
        log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ (grant)")
    await update.message.reply_text(f"üéÅ (DEV) –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –Ω–∞ {days} –¥–Ω.")
    await update.message.reply_text(f"üéÅ (DEV) –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –Ω–∞ {days} –¥–Ω.")

from telegram.error import TelegramError

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—á–∞–µ–º –º—è–≥–∫–æ
    log.exception("Unhandled error", exc_info=context.error)
    try:
        if isinstance(update, Update) and update.message:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
    except TelegramError:
        pass

async def check_subscriptions(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç users.json –∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –∏—Å—Ç—ë–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏.
    """
    now = datetime.now(timezone.utc)
    changed = False
    expired_count = 0

    # USERS ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–π dict[int, User]
    for uid, u in list(USERS.items()):
        end_iso = getattr(u, "subscription_end", None)
        if not end_iso:
            continue
        try:
            end = datetime.fromisoformat(end_iso)
        except Exception:
            continue

        # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Å—Ä–æ–∫ –≤—ã—à–µ–ª
        if getattr(u, "subscribed", False) and now >= end:
            u.subscribed = False
            changed = True
            expired_count += 1
            # –ø—Ä–æ–±—É–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è; –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                await context.bot.send_message(
                    chat_id=uid,
                    text="‚õî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy."
                )
            except Exception:
                pass

    if changed:
        save_users(USERS)
        log.info(f"[job] auto-expired {expired_count} subscriptions")

# --- HTTP API –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
async def http_get_wg_config(request: web.Request) -> web.Response:
    code = request.query.get("code", "").strip()
    if not code:
        return web.Response(status=400, text="missing code")
    data = take_token(code)
    if not data:
        return web.Response(status=401, text="invalid or expired code")

    user_id = int(data["user_id"])
    if not is_subscription_active(USERS, user_id):
        return web.Response(status=403, text="subscription inactive")

    try:
        cfg_path = ensure_user_wg_config(user_id)
        txt = cfg_path.read_text(encoding="utf-8")
        return web.Response(status=200, text=txt, content_type="text/plain")
    except Exception as e:
        log.exception("HTTP config error")
        return web.Response(status=500, text=f"server error: {e}")

async def http_validate(request: web.Request) -> web.Response:
    """
    POST /api/validate
    Body: {"code":"123456"}
    –û—Ç–≤–µ—Ç: JSON {"ok": bool, "subscriptionActive": bool, "message": str}
    (–∫–æ–¥ –ù–ï —Ä–∞—Å—Ö–æ–¥—É–µ–º, —á—Ç–æ–±—ã –µ–≥–æ –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è /api/config)
    """
    try:
        data = await request.json()
    except Exception:
        return web.json_response(
            {"ok": False, "subscriptionActive": False, "message": "invalid json"},
            status=400,
        )

    code = str(data.get("code", "")).strip()
    if not code:
        return web.json_response(
            {"ok": False, "subscriptionActive": False, "message": "empty code"},
            status=400,
        )

    peek = peek_token(code)
    if not peek:
        return web.json_response(
            {"ok": False, "subscriptionActive": False, "message": "invalid or expired code"},
            status=200,
        )

    user_id = int(peek["user_id"])
    active = is_subscription_active(USERS, user_id)
    if not active:
        return web.json_response(
            {"ok": True, "subscriptionActive": False, "message": "subscription inactive"},
            status=200,
        )

    return web.json_response(
        {"ok": True, "subscriptionActive": True, "message": "OK"},
        status=200,
    )


async def http_get_config_plain(request: web.Request) -> web.Response:
    """
    GET /api/config?code=123456
    –û—Ç–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ñ–∏–≥–∞ (plain text). –ó–¥–µ—Å—å –∫–æ–¥ –†–ê–°–•–û–î–£–ï–ú (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π).
    """
    code = request.query.get("code", "").strip()
    if not code:
        return web.Response(status=400, text="missing code")

    data = take_token(code)  # <-- –∏–º–µ–Ω–Ω–æ —Ä–∞—Å—Ö–æ–¥—É–µ–º
    if not data:
        return web.Response(status=401, text="invalid or expired code")

    user_id = int(data["user_id"])
    if not is_subscription_active(USERS, user_id):
        return web.Response(status=403, text="subscription inactive")

    try:
        cfg_path = ensure_user_wg_config(user_id)
        txt = cfg_path.read_text(encoding="utf-8")
        return web.Response(status=200, text=txt, content_type="text/plain")
    except Exception as e:
        log.exception("HTTP config error")
        return web.Response(status=500, text=f"server error: {e}")


async def http_telegram_link(request: web.Request) -> web.Response:
    """
    GET /api/telegram-link
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"url":"https://t.me/thatvpn_bot"}
    """
    return web.json_response({"url": get_telegram_link_url()}, status=200)


async def start_http_api():
    app_http = web.Application()
    # –°—Ç–∞—Ä—ã–π –º–∞—Ä—à—Ä—É—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –±—ã–ª:
    app_http.router.add_get("/api/v1/config/wg", http_get_wg_config)

    # –ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–¥ Android-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
    app_http.router.add_post("/api/validate", http_validate)
    app_http.router.add_get("/api/config", http_get_config_plain)
    app_http.router.add_get("/api/telegram-link", http_telegram_link)

    runner = web.AppRunner(app_http)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=8080)
    await site.start()
    log.info("HTTP API started on http://0.0.0.0:8080")


from telegram.ext import Application  # –¥–æ–±–∞–≤—å –∫ –∏–º–ø–æ—Ä—Ç–∞–º —Å–≤–µ—Ä—Ö—É

async def _post_init(app: Application) -> None:
    # –∑–¥–µ—Å—å event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–∂–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å aiohttp
    app.create_task(start_http_api())


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(_post_init).build()


    app.add_error_handler(on_error)

    # –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("buy", buy))
    app.add_handler(CommandHandler("check", check))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("app_code", app_code))
    app.add_handler(CommandHandler("vpn_wg", vpn_wg))
    app.add_handler(CommandHandler("vpn", vpn))
    app.add_handler(CommandHandler("help", help_cmd))

    # DEV –∫–æ–º–∞–Ω–¥—ã
    if DEV_MODE:
        app.add_handler(CommandHandler("dev_paid", dev_paid))
        app.add_handler(CommandHandler("grant", grant))

        # –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ DEV-—Ä–µ–∂–∏–º–µ
        async def dev_checksubs(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if update.effective_user.id != OWNER_ID:
                return
            await check_subscriptions(context)
            await update.message.reply_text("üîß (DEV) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

        app.add_handler(CommandHandler("dev_checksubs", dev_checksubs))

    # unknown ‚Äî –°–¢–†–û–ì–û –ü–û–°–õ–ï–î–ù–ò–ú!
    app.add_handler(MessageHandler(filters.COMMAND, unknown))

    # –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–∞–∑ –≤ —á–∞—Å, –ø–µ—Ä–≤–∞—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
    app.job_queue.run_repeating(
        check_subscriptions,
        interval=3600,
        first=60,
        name="sub_checker",
    )

    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()



if __name__ == "__main__":
    main()
